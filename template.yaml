AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-backup-rotator
  
  Sample SAM Template for aws-backup-rotator

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Parameters:
  BackupSNSTopicARNParameter:
    Type: String
    Description: The ARN for a previously existing SNS topic to which AWS Backup publishes its notifications. The Step Function will subscribe to this topic and begin execution when a "BACKUP_JOB_COMPLETED" notification is published.
    AllowedPattern: "^arn:aws:sns:[a-zA-Z0-9_.-]+:[0-9]{12}:[a-zA-Z0-9_.-]+"
  SourcePatternParameter:
    Type: String
    Description: A regular expression matching the table name - not full ARN - of resources to be restored, e.g., "(?i)-production$" (without the double quotes) for all DynamoDB tables ending with "-production" (case insensitive). If no expression is provided, all DynamoDB tables will be restored. Currently only DynamoDB tables are supported.
    Default: ".*"
  ReplacementPatternParameter:
    Type: String
    Description: A replacement expression used to name the restored resource given in the format, e.g., "-staging" (without the double quotes) to replace the given SourcePatternParameter with "-staging" in the newly restored instance. A date time stamp of the format "-20060102-15-04-05" (-YYYYMMDD-HH-mm-ss) will be appended to the replacement name in all cases. If no expression is provided, the restored resource will bear the name of the original resource with the date time stamp appended, i.e., use "$0" as the replacement expression.
    Default: "$0"

Resources:
  AWSBackupSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        !GetAtt StartStateMachineFunction.Arn
      # FilterPolicy: 
      #   |-
      #   {
      #     "BackupVaultEvents": [
      #       "BACKUP_JOB_COMPLETED"
      #     ]
      #   }
      Protocol: lambda
      TopicArn:
        Ref: BackupSNSTopicARNParameter
  
  SNSLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: BackupSNSTopicARNParameter
      FunctionName:
        !GetAtt StartStateMachineFunction.Arn

  StartStateMachineFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./bin/start-workflow/
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: DynamoDBCloneRotator
          SOURCE_PATTERN:
            Ref: SourcePatternParameter
          REPLACEMENT_PATTERN:
            Ref: ReplacementPatternParameter
      Handler: start-workflow
      Role:
        !GetAtt StartStateMachineFunctionRole.Arn
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html

  DynamoDBCloneRotator:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "The DynamoDB Clone Rotator creates a DynamoDB table from a backup created by AWS Backup.",
              "StartAt": "Restore Backup",
              "States": {
                "Restore Backup": {
                  "Type": "Task",
                  "Resource": "${restoreBackupArn}",
                  "ResultPath": "$.RestoreDynamoDBTableOutput",
                  "Next": "Complete"
                },
                "Complete": {
                  "Type": "Succeed"
                }
              }
            }
          - {
              restoreBackupArn:
                !GetAtt RestoreBackupFunction.Arn
            }
      RoleArn:
        !GetAtt StatesExecutionRole.Arn
      StateMachineName: DynamoDBCloneRotator
  
  RestoreBackupFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./bin/restore-backup/
      Handler: restore-backup
      Role:
        !GetAtt RestoreBackupFunctionRole.Arn
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html

# IAM Roles
  StartStateMachineFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StartStateMachineFunctionExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource:
                  - Ref: DynamoDBCloneRotator

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: DynamoDBCloneRotatorStatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt RestoreBackupFunction.Arn
  
  RestoreBackupFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RestoreBackupFunctionExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:RestoreTableFromBackup"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource:
                  - "*"

Outputs:
  StartStateMachineFunction:
    Description: "StartStateMachine Lambda Function ARN"
    Value:
      !GetAtt StartStateMachineFunction.Arn
